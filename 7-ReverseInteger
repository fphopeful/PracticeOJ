/*
Reverse digits of an integer.

Example1: x = 123, return 321
Example2: x = -123, return -321

click to show spoilers.

Have you thought about this?
Here are some good questions to ask before coding. Bonus points for you if you have already thought through this!

If the integer's last digit is 0, what should the output be? ie, cases such as 10, 100.

Did you notice that the reversed integer might overflow? Assume the input is a 32-bit integer, then the reverse of 1000000003 overflows. How should you handle such cases?

For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.

Update (2014-11-10):
Test cases had been added to test the overflow behavior.
*/

class Solution {
public:
    int reverse(int x) {
        long long res = 0;
        while (x!=0)
        {
            res = res * 10 + x % 10;
            x= x/10;
        }
        if(res < INT_MIN || res > INT_MAX)
            return 0;
        return res;
    }
};

//note
//考虑三种情况
//1.是0.
//2.overflow.可以用longlong来表示结果,最后和INT_MIN比较INT_MAX,INT在前.
//3.如果是负数,直接进行运算不会有影响.x%10得到最末尾的数字,然后x/10;而res=res*10+x末尾的数字.
//int 范围是-32768到32767,在c++中是MIN_INT,MAX_INT.即-2的31次方到2的31次方-1;

//第一版代码
class Solution {
public:
    int reverse(int x) {
        vector<int> a;//就一个a.
        a.resize(6);//resize
        int i = 0, result = 0;
        int tmp, n;
        if (x>32767 || x<-32768)
            return 0;
        if (x < 0)
            tmp = 0 - x;
        while(tmp != 0)
        {
            a[i] = tmp%10;
            tmp = tmp/10;
            i++;
        }
        n = i;
        for (i = 0;i<n;i++) {
            if (result > 32768)
                return 0;
            else
                result = result * 10 +a[i];
        }
        if (result == 32768 && x>0)
            return 0;
        if (x<0)
            result = 0-result;
        return result;
    }
};
