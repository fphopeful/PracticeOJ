//根据测试用例猜测题意,这里的subarray指的并不是矩阵.而是子串.
//解法1,穷举法,两个循环,i从0到n,j从i到n.求i到j区间的子串.复杂度为n的平方.
//解法2,动态规划,复杂度为n
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int n = nums.size();//以后通通用size(),length是string才有的.
        if (n <= 0) return 0;
        if (n == 1) return nums[0];
        int cur_max = nums[0], max_pro = nums[0], cur_min = nums[0];
        for (int i = 1; i < n; i++) {
            int tmp = cur_max;
            cur_max = max(max(cur_max * nums[i], nums[i]), cur_min * nums[i]);//在这里,要么是(cur_max或cur_min)*nums[i]
            //要么是nums[i]本身,总之不能是只有cur,因为cur_max指的是以当前这个数结尾得到的最大乘积,所以肯定得有nums[i]这个值.
            max_pro = max(cur_max, max_pro);
            cur_min = min(min(nums[i], tmp * nums[i]), cur_min * nums[i]);
        }
        return max_pro;
    }
};
/*原型:求最大和子串
对于相加的情况，只要能够处理局部最大和全局最大之间的关系即可，对此，写出转移方程式如下：
local[i + 1] = Max(local[i] + A[i], A[i]);

global[i + 1] = Max(local[i + 1], global[i]);
*/
/*求最大积子串
而对于Product Subarray，要考虑到一种特殊情况，即负数和负数相乘：如果前面得到一个较小的负数，和后面一个较大的负数相乘，得到的反而是一个较大的数，如{2，-3，-7}，所以，我们在处理乘法的时候，除了需要维护一个局部最大值，同时还要维护一个局部最小值，由此，可以写出如下的转移方程式：

max_copy[i] = max_local[i]
max_local[i + 1] = Max(Max(max_local[i] * A[i], A[i]),  min_local * A[i])
min_local[i + 1] = Min(Min(max_copy[i] * A[i], A[i]),  min_local * A[i])
*/
