/*Rotate an array of n elements to the right by k steps.

For example, with n = 7 and k = 3, the array [1,2,3,4,5,6,7] is rotated to [5,6,7,1,2,3,4].

Note:
Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.

Hint:
Could you do it in-place with O(1) extra space?
*/
//rotate array旋转数组,根据例子,相当于是一个环,每次把最末尾的数字移到开头.k是移动的次数.
//关键点在于,空间复杂度为O(1),即不能建立新的数组,只能用原有的.提示里说有至少三种方法.
//方法1
/*class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int tmp;
        int n = nums.size();
        for (int i = 0; i < k; i++) {
            tmp = nums[n-1];
            nums.pop_back();
            nums.insert(nums.begin(), tmp);
        }
    }
};*/
//v.insert(pos,value), v.insert(pos,m,value), v.insert(pos,beg,end).  v.push_back(value)
//v.erase(pos), v.erase(beg,end),返回下一个元素的位置.v.pop_back(),不回传.
//两个vector之间复制,v.assign(beg,end).v1 = v2.
//两个vector互换,v1.swap(v2)

//方法2:把整个数组反转,然后,根据k,分成前k个,和后n-k个,然后分别反转.但要注意如果出现k大于n的情况,取余数.
class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int n = nums.size();
        k = k%n;//防止k大于n.
        reverse(nums, 0, n-1);
        reverse(nums, 0, k-1);
        reverse(nums, k, n-1);
    }
    void reverse(vector<int> &nums, int i, int j) {
        for (int t = i; t < (i+(j-i+1)/2) ; t++) {
            swap(nums[t], nums[j-t+i]);
        }
    }
};

//方法3:像冒泡一样,把每个值往后错一位.这样的话,时间复杂度为k*n.超时.弃用.
/*
class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int n = nums.size();
        for (int i = 0; i < k; i++) {
            int tmp = nums[n-1];
            for (int j = n-1; j > 0; j--) {
                nums[j] = nums[j-1];
            }
            nums[0] = tmp;
        }
    }
};*/
