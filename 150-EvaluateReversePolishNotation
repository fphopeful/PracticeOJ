/*
Evaluate the value of an arithmetic expression in Reverse Polish Notation.

Valid operators are +, -, *, /. Each operand may be an integer or another expression.

Some examples:
  ["2", "1", "+", "3", "*"] -> ((2 + 1) * 3) -> 9
  ["4", "13", "5", "/", "+"] -> (4 + (13 / 5)) -> 6
*/
//逆波兰表达式,又叫后缀表达式.平时我们用的表达式其实是中缀表达式.即运算符在需要运算的两个数字之间.
class Solution {
public:
    int eval(int a, int b, string op) {
        if (op == "+")
            return a+b;
        else if(op == "-")
            return a-b;
        else if(op == "*")
            return a*b;
        else if(op == "/")
            return a/b;
    } 
    int evalRPN(vector<string>& tokens) {
        stack<int> num;
        int n1, n2;
        for(int i = 0; i < tokens.size(); i++) {
            if (tokens[i] == "+" || tokens[i] == "-" || tokens[i] == "*" || tokens[i] == "/") {
                if (!num.empty()) {
                    n2 = num.top();
                    num.pop();
                    n1 = num.top();
                    num.pop();
                    num.push(eval(n1, n2, tokens[i]));
                }
            }
            else {
                num.push(stoi(tokens[i]));
            }
        }
        return num.top();
    }
};
//stoi(string),比如string "10"返回int 10;
//!!!switch(a){},a只能为整数选择因子.
//而且从测试来看,并没有对invalid字符进行检测.
